
/****************************
PHPに記述 --> 基本設定
*****************************/

<?php wp_head(); ?>    
//htmlの、</head>の前に

<?php wp_footer(); ?>
//htmlの、</body>の前に

<?php language_attributes(); ?>
//<html lang="ja"> --> <html <?php language_attributes(); ?>>

<?php bloginfo('charset'); ?>
// <meta charset="UTF-8"> -->  <meta charset="<?php bloginfo( 'charset' ); ?>">

<?php bloginfo( 'description' ); ?>
//ダッシュボード -> 設定 -> 一般 -> サイトのキャッチフレーズに表記されているものを出力

<?php bloginfo( 'name' ); ?>
//ダッシュボード -> 設定 -> 一般 -> サイトのタイトルに表記されているものを出力

<?php body_class(); ?> --> <body <?php body_class(); ?>> 
//各設定(テンプレート階層)ページにあわせて、自動的にクラスを付ける
//(例)　トップページの場合、<body class="home"> --> homeは、wordpressの場合トップページに該当

<?php echo esc_url( get_theme_file_uri( '!!!!/!!!!.png' )); ?> --> <img src="<?php echo esc_url( get_theme_file_uri( 'images/logo.png' )); ?>" alt="<?php bloginfo( 'name' ); ?>">
// !!!/!!!.png または、jpgは、htmlでの画像、CSS等のパスを取得することができる
<?php echo get_template_directory_uri(); ?>/000/000jpg
この関数でもパスを取得することができる

<?php echo esc_url( home_url( '/' )); ?> --> <a class="c-logo" href="<?php echo esc_url( home_url( '/' )); ?>">
//トップページに戻るリンクを取得することができる

<?php echo esc_url( get_stylesheet_uri()); ?> -->  <link href="<?php echo esc_url( get_stylesheet_uri()); ?>" rel="stylesheet"/>
// 第一階層のstyle.cssに記述されているCSSを読み込む。 教科書ではこの方法を採用しいている
// 第一階層ではない、CSSを読み込むには、画像ファイルを読み込むのと同じ手法を使う -->  <link href="<?php echo esc_url( get_theme_file_uri( 'css/style.css' )); ?>" rel="stylesheet">

/****************************
funcitons.phpに記述 
after_setup_theme --> wordpressのサイトが表示がされる時に呼び出され処理される内容の記述
*****************************/

function ???_setup() {

	呼び出され処理される内容の記述

}
add_action( 'after_setup_theme', '???_setup' );
//基本形 --> ???の任意の名前を付ける

// コンテンツ幅をセット　*教科書の場合、723に設定している　functions.phpの一番上に記述

if ( ! isset( $content_width ) ) {
	$content_width = 723;
}


function custom_theme_setup() {
    
	//head内にフィードリンクを出力
	add_theme_support( 'automatic-feed-links' );

	//タイトルタグを動的に出力
	add_theme_support( 'title-tag' );

	//ブロックエディター用のCSSを有効化
	add_theme_support( 'wp-block-styles' );

	//埋め込みコンテンツをレスポンシブ対応に
	add_theme_support( 'responsive-embeds' );

	/****************************
	funcitons.phpに記述　=== アイキャッチ画像を有効化
	*****************************/
	//アイキャッチ画像を有効化
	add_theme_support( 'post-thumbnails' );
	set_post_thumbnail_size( 600, 400, false );

	//PHPへの記述例の詳細は、template-tag4のアイキャッチ画像を有効化のを参考に


	/****************************
	funcitons.phpに記述　=== カスタムメニュー
	*****************************/
	register_nav_menus(
		array(
			'globalnav' => 'グローバルナビゲーション',
			//phpに記述する、'theme_location'  => 'globalnav' と一致させる
			//他にもナビゲーションを作る場合
			'footernav' => 'フッターナビゲーション',
			//など、いくつでも追加できる --> PHPへの記述例は、template-tag4のカスタムメニュー参考に
		)
	);


}

add_action( 'after_setup_theme', 'custom_theme_setup' );

//custom_theme_setup の名称は自分で好きなファイル名でOK



/****************************
funcitons.phpに記述 
wp_enqueue_scripts --> CSSや、Jqueryをfuncitons.php側で制御するための関数
*****************************/

function myportfolio_scripts() {
	wp_enqueue_style(
		'base-style',         // ハンドル名
		get_stylesheet_uri(), // ファイルのパス
		array(),              // 依存関係
		'1.0',                // バージョン指定
		'all'                 // メディアタイプ
	);
//教科書の例としての記述
}
add_action( 'wp_enqueue_scripts', 'myportfolio_scripts' );

//myportfolio_scripts の名称は自分で好きなファイル名でOK

//この記述で、しっかり制御するなら、template-tag2のような記述例が必要

// ウィジェットエリアの登録
function custom_widget_register() {
	register_sidebar( array(
		'name'          => 'サイドバーウィジェットエリア',
		'id'            => 'sidebar-widget',
		'description'   => 'ブログページのサイドバーに表示されます。',
		'before_widget' => '<div id="%1$s" class="c-widget %2$s">',
		'after_widget'  => '</div>',
		'before_title'  => '<h2 class="c-widget__title">',
		'after_title'   => '</h2>',
	) );
}
add_action( 'widgets_init', 'custom_widget_register' );





